#include <iostream>
using namespace std;

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

// Function to merge two sorted linked lists
ListNode* merge(ListNode* l1, ListNode* l2) {
    if (!l1) return l2;
    if (!l2) return l1;

    // Merge l1 and l2
    if (l1->val < l2->val) {
        l1->next = merge(l1->next, l2);
        return l1;
    } else {
        l2->next = merge(l1, l2->next);
        return l2;
    }
}

// Function to split the list into two halves
ListNode* findMiddle(ListNode* head) {
    if (!head || !head->next) return head;
    
    ListNode* slow = head;
    ListNode* fast = head->next;
    
    // Move fast by 2 steps and slow by 1 step
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Merge Sort function
ListNode* mergeSort(ListNode* head) {
    if (!head || !head->next) return head;  // Base case: list is empty or has one element
    
    // Step 1: Find the middle of the list
    ListNode* mid = findMiddle(head);
    ListNode* secondHalf = mid->next;
    mid->next = nullptr;  // Split the list into two halves
    
    // Step 2: Recursively sort both halves
    ListNode* left = mergeSort(head);
    ListNode* right = mergeSort(secondHalf);
    
    // Step 3: Merge the sorted halves
    return merge(left, right);
}

// Function to print the linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Create a linked list: 4 -> 2 -> 1 -> 3
    ListNode* head = new ListNode(4);
    head->next = new ListNode(2);
    head->next->next = new ListNode(1);
    head->next->next->next = new ListNode(3);

    cout << "Original List: ";
    printList(head);

    // Sort the list using merge sort
    head = mergeSort(head);

    cout << "Sorted List: ";
    printList(head);

    // Clean up memory
    ListNode* current = head;
    while (current != nullptr) {
        ListNode* nextNode = current->next;
        delete current;
        current = nextNode;
    }

    return 0;
}
